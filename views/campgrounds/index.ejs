<% layout('layouts/boilerplate')%>

<h1 class="text-center mb-3">All Campgrounds</h1>
<% for (let campground of campgrounds){%>
<div class="card mb-3">
    <div class="row">
        <div class="col-md-4">
            <img class="img-fluid" alt="" src="<%=campground.image[0].indexCard%>">
        </div>
        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title"><%= campground.title %> </h5>
                <p class="card-text"><%= campground.descp %></p>
                <p class="card-text">
                    <small class="text-muted"><%= campground.location%></small>
                </p>
                <a class="btn btn-primary" href="/campgrounds/<%=campground._id%>">View <%=campground.title%></a>
            </div>
        </div>
    </div>
</div>
<% }%>

<script>
    const accessToken = '<%- accessToken %>';
</script>

<script>
    mapboxgl.accessToken = accessToken;
    const map = new mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mapbox/satellite-v9",
      center: [-103.5917, 40.6699],
      zoom: 3,
    });
  
    map.on("load", () => {
      map.addSource("campgrounds", {
        type: "geojson",
        data: "/internalApi",
        cluster: true,
        clusterMaxZoom: 14,
        clusterRadius: 50,
      });
  
      map.addLayer({
        id: "clusters",
        type: "circle",
        source: "campgrounds",
        filter: ["has", "point_count"],
        paint: {
          "circle-color": [
            "step",
            ["get", "point_count"],
            "#51bbd6",
            3,
            "#f1f075",
            8,
            "#f28cb1",
          ],
          "circle-radius": ["step", ["get", "point_count"], 20, 3, 30, 8, 40],
        },
      });
  
      map.addLayer({
        id: "cluster-count",
        type: "symbol",
        source: "campgrounds",
        filter: ["has", "point_count"],
        layout: {
          "text-field": "{point_count_abbreviated}",
          "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
          "text-size": 12,
        },
      });
  
      map.addLayer({
        id: "unclustered-point",
        type: "circle",
        source: "campgrounds",
        filter: ["!", ["has", "point_count"]],
        paint: {
          "circle-color": "#11b4da",
          "circle-radius": 4,
          "circle-stroke-width": 1,
          "circle-stroke-color": "#fff",
        },
      });
  
      map.on("click", "clusters", (e) => {
        const features = map.queryRenderedFeatures(e.point, {
          layers: ["clusters"],
        });
        const clusterId = features[0].properties.cluster_id;
        map
          .getSource("campgrounds")
          .getClusterExpansionZoom(clusterId, (err, zoom) => {
            if (err) return;
  
            map.easeTo({
              center: features[0].geometry.coordinates,
              zoom: zoom,
            });
          });
      });
  
      map.on("click", "unclustered-point", (e) => {
        const coordinates = e.features[0].geometry.coordinates.slice();
        const title = e.features[0].properties.title;
        const location = e.features[0].properties.location;
        const link = `/campgrounds/${e.features[0].properties.id}`;

        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
  
        new mapboxgl.Popup()
          .setLngLat(coordinates)
          .setHTML(`<a href = ${link}><h4>${title}</h4></a><p>${location}</p>`)
          .addTo(map);
      });
  
      map.on("mouseenter", "clusters", () => {
        map.getCanvas().style.cursor = "pointer";
      });
      map.on("mouseleave", "clusters", () => {
        map.getCanvas().style.cursor = "";
      });
    });

    map.addControl(new mapboxgl.NavigationControl());
</script> 